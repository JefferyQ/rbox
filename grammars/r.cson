# Special thanks to lee-dohm who imported grammar from "r.tmbundle" and packed for Atom, Entitled "language-r".

'fileTypes': [
  'R'
]
'name': 'R'
'scopeName': 'source.r'
'patterns': [
  {
    'match': '(<-|=|<<-|->|->>)'
    'name': 'assignment.r'
  }
  {
    'begin': '#'
    'end': '\\n'
    'name': 'comment.r'
  }
  {
    'match': '".*?"'
    'name': 'string.quoted.double.r'
  }
  {
      'match': '\'.*?\''
      'name': 'string.quoted.single.r'
  }
  {
    'match': '\\b((([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(i)?\\b'
    'name': 'constant.numeric.r'
  }
  {
    'match': '(?<![\\w\\d\\$\\.])(T|F|TRUE|FALSE|NULL|NA|Inf|NaN)(?![\\w\\d\\$\\.])'
    'name': 'constant.r'
  }
  {
    'match': '(\\-|\\+|\\*|\\/|%\\/%|%%|%\\*%|%in%|%o%|%*%|%>%|\\^)'
    'name': 'operator.r'
  }
  {
      'match': ';'
      'name': 'semicolon.r'
  }
  {
      'match': ','
      'name': 'comma.r'
  }
  {
      'match': '[{]|[}]'
      'name': 'curlybraces'
  }
  {
      'match': '[\\[]|[\\]]'
      'name': 'squarebraces'
  }
  {
   'match': '[!]|[&]|[|]'
   'name': 'logical.r'
  }
  {
    'match': '(\\~)'
    'name': 'tilda.r'
  }
  {
    'match': '(\\.\\.\\.|\\$|@|:)'
    'name': 'keyword.other.r'
  }
  {
    'match': '\\b(c|list|matrix|data\\.frame|cbind|rbind)(?=\\s*\\()'
    'name': 'storage.r'
  }
  {
    'match': '\\b(function|if|break|next|repeat|else|ifelse|for|return|while|in)\\b'
    'name': 'keyword.control.r'
  }
  {
    'match': '\\b(library|require|source)\\b'
    'name': 'keyword.import.r'
  }
  {
  'match': '><'
  'name': 'invalid.deprecated.operator.r'
  }
  {
   'match': '(\\b([\\d_][[:alnum:]._]+)\\b)|>='
   'name': 'invalid.illegal.variable.other.r'
  }
  {
    'captures':
      '1':
        'name': 'entity.name.function.r'
      '2':
        'name': 'assignment.r'
      '3':
        'name': 'keyword.control.r'
    'match': '([[:alpha:].][[:alnum:]._]*)\\s*(<-)\\s*(function)'
    'name': 'meta.function.r'
  }
  {
    'captures':
      '1':
        'name': 'entity.name.function.r'
      '2':
        'name': 'braces.r'
    'match': '([[:alpha:]._][[:alnum:]._]*)(\\()'
  }
  {
    'begin': '\\{'
    'end': '\\}'
    'name': 'block.r'
  }
  {
      'match': '[\\(]|[\\)]'
      'name': 'roundbraces'
  }
]
